#include <iostream>
#include <omp.h>

#include <climits>

using namespace std; - void min_reduction (int arr[], int n) {

int min_value = INT_MAX;

#pragma omp parallel for reduction (min: min_value)

for (int i = 0; i < n; i++) {

if (arr[i] <an_value) {

min_value = arr[1];

}
}
cout<<"Minimum value: " << min_value << endl; }

void max_reduction(int arr[], int n) {

int max_value = INT_MIN; #pragma omp parallel for reduction (max: max_value) for (int i = 0; i < n; i++) {

if (arr[i]> max_value) { max_value = arr[i];

}

} cout << "Maximum value: " << max_value <<<< endl; }

- void sum_reduction(int arr[], int n) { int sum = 0;

#pragma omp parallel for reduction(+: sum) for (int i = 0; i < n; i++) { sum += arr[1];
[0:23 am, 11/05/2023] Diksha: cout << "Sum:

< n; i++) {

sum<<endl;

void average reduction(int arr[], int n) {

int sum = 0; 
#pragma omp parallel for reduction (+: sum) 2. for (int i = 0; i < n; i++) {

= sum += arr[i]; }

cout<<"Average: " << (double)sum (n-1) << endl;

int main() {

int arr,n;

cout<<"\n Enter total no of elements=>";

cin>>n;

arr=new int[n];

cout<<"\n Enter elements=>";

for (int i=0;i<n;i++)

cin>>arr[i];
}

min_reduction(arr, n); max reduction(arr, n);

sum_reduction(arr, n);

average_reduction(arr, n);
}
